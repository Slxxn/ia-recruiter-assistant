import os
import re
import json
from dotenv import load_dotenv
from groq import Groq

load_dotenv()
client = Groq(api_key=os.getenv("GROQ_API_KEY"))

def analyze_candidate(cv_text=None, job_title=None, letter_text=None):
    """
    Analyse une candidature de maniÃ¨re contextuelle, cohÃ©rente et robuste.
    - Corrige automatiquement les erreurs JSON de sortie.
    - PondÃ¨re les notes selon le type de poste.
    - GÃ©nÃ¨re un verdict cohÃ©rent avec les scores.
    """

    # VÃ©rification minimale
    if not cv_text and not job_title:
        return json.dumps({
            "resume": "Aucune donnÃ©e fournie.",
            "points_forts": [],
            "points_faibles": ["Il faut au moins un CV ou un intitulÃ© de poste."],
            "notes": {
                "CompÃ©tences techniques": 0,
                "ExpÃ©rience et rÃ©alisations": 0,
                "QualitÃ©s humaines / Soft skills": 0,
                "Motivation et adÃ©quation au poste": 0,
                "Potentiel dâ€™Ã©volution": 0
            },
            "global": 0,
            "verdict": "ðŸŸ¡ Ã€ approfondir"
        }, ensure_ascii=False)

    # --- Contexte dynamique ---
    context = ""
    if job_title:
        context += f"POSTE CIBLE : {job_title}\n---\n"
    if cv_text:
        context += f"CV DU CANDIDAT :\n{cv_text}\n---\n"
    if letter_text:
        context += f"LETTRE DE MOTIVATION :\n{letter_text}\n---\n"
    else:
        context += "Aucune lettre de motivation fournie.\n---\n"

    # --- DÃ©tection du type de poste (pour pondÃ©ration) ---
    job_title_lower = job_title.lower() if job_title else ""
    if any(word in job_title_lower for word in ["vendeur", "commercial", "accueil", "client", "communication", "service"]):
        job_type = "commercial"
    elif any(word in job_title_lower for word in ["dÃ©veloppeur", "technicien", "ingÃ©nieur", "data", "maintenance", "informatique"]):
        job_type = "technique"
    else:
        job_type = "mixte"

    # --- Prompt IA ---
    prompt = f"""
Tu es un recruteur IA professionnel. Analyse le profil ci-dessous en lien avec le poste ciblÃ©.

DonnÃ©es :
{context}

ðŸŽ¯ Objectif :
- Les points forts doivent expliquer pourquoi certaines compÃ©tences ou expÃ©riences sont pertinentes pour le poste.
- Les points faibles doivent pointer uniquement les manques rÃ©els ou axes d'amÃ©lioration.
- Ne te contredis jamais : si le CV prouve une compÃ©tence, ne la considÃ¨re pas comme un manque.
- Si le candidat a dÃ©jÃ  travaillÃ© dans le mÃªme poste ou la mÃªme entreprise, considÃ¨re cela comme un atout majeur.
- Les notes doivent reflÃ©ter lâ€™adÃ©quation rÃ©elle au poste.
- PondÃ©ration implicite selon le type de poste :
  â€¢ Poste commercial â†’ plus de poids sur Soft Skills & Motivation
  â€¢ Poste technique â†’ plus de poids sur CompÃ©tences & ExpÃ©rience
  â€¢ Poste mixte â†’ Ã©quilibre les critÃ¨res

ðŸ“‹ FORMAT DE SORTIE (JSON STRICT UNIQUEMENT) :
{{
  "resume": "RÃ©sumÃ© global du candidat (3â€“5 lignes).",
  "points_forts": [
    "CompÃ©tence ou expÃ©rience â€” explication de sa pertinence pour le poste."
  ],
  "points_faibles": [
    "Manque ou faiblesse â€” pourquoi câ€™est un frein pour ce poste."
  ],
  "notes": {{
    "CompÃ©tences techniques": nombre,
    "ExpÃ©rience et rÃ©alisations": nombre,
    "QualitÃ©s humaines / Soft skills": nombre,
    "Motivation et adÃ©quation au poste": nombre,
    "Potentiel dâ€™Ã©volution": nombre
  }}
}}

RÃ©ponds uniquement avec le JSON.
"""

    try:
        # --- Appel au modÃ¨le ---
        completion = client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )

        raw_output = completion.choices[0].message.content.strip()
        json_part = raw_output[raw_output.find("{"): raw_output.rfind("}") + 1]

        # --- Nettoyage automatique du JSON ---
        json_part = json_part.replace("\n", " ")
        json_part = re.sub(r"\s+", " ", json_part)
        json_part = json_part.replace("â€™", "'")
        json_part = json_part.replace("Â«", '"').replace("Â»", '"')

        # --- Parsing tolÃ©rant ---
        try:
            data = json.loads(json_part)
        except json.JSONDecodeError:
            try:
                import simplejson as sjson
                data = sjson.loads(json_part, strict=False)
            except Exception:
                return json.dumps({
                    "resume": "Erreur lors de l'analyse (format JSON illisible).",
                    "points_forts": [],
                    "points_faibles": [],
                    "notes": {},
                    "global": 0,
                    "verdict": "ðŸŸ¡ Ã€ approfondir"
                }, ensure_ascii=False)

        # --- Normalisation des notes ---
        data.setdefault("notes", {})
        for k in [
            "CompÃ©tences techniques",
            "ExpÃ©rience et rÃ©alisations",
            "QualitÃ©s humaines / Soft skills",
            "Motivation et adÃ©quation au poste",
            "Potentiel dâ€™Ã©volution"
        ]:
            data["notes"].setdefault(k, 0)

        # --- PondÃ©ration par type de poste ---
        weights = {
            "commercial": {
                "CompÃ©tences techniques": 0.8,
                "ExpÃ©rience et rÃ©alisations": 1.0,
                "QualitÃ©s humaines / Soft skills": 1.2,
                "Motivation et adÃ©quation au poste": 1.3,
                "Potentiel dâ€™Ã©volution": 1.0
            },
            "technique": {
                "CompÃ©tences techniques": 1.3,
                "ExpÃ©rience et rÃ©alisations": 1.2,
                "QualitÃ©s humaines / Soft skills": 0.8,
                "Motivation et adÃ©quation au poste": 0.9,
                "Potentiel dâ€™Ã©volution": 1.0
            },
            "mixte": {
                "CompÃ©tences techniques": 1.0,
                "ExpÃ©rience et rÃ©alisations": 1.0,
                "QualitÃ©s humaines / Soft skills": 1.0,
                "Motivation et adÃ©quation au poste": 1.0,
                "Potentiel dâ€™Ã©volution": 1.0
            }
        }

        w = weights.get(job_type, weights["mixte"])
        total_score, total_weight = 0, 0
        for key, score in data["notes"].items():
            total_score += score * w.get(key, 1)
            total_weight += w.get(key, 1)
        data["global"] = round(total_score / total_weight, 1) if total_weight > 0 else 0

        # --- Verdict automatique ---
        if data["global"] >= 7:
            data["verdict"] = "ðŸŸ¢ Ã€ retenir"
        elif data["global"] >= 4:
            data["verdict"] = "ðŸŸ¡ Ã€ approfondir"
        else:
            data["verdict"] = "ðŸ”´ Non pertinent"

        return json.dumps(data, ensure_ascii=False, indent=2)

    except Exception as e:
        return json.dumps({
            "resume": "Erreur lors de l'analyse.",
            "points_forts": [],
            "points_faibles": [str(e)],
            "notes": {},
            "global": 0,
            "verdict": "ðŸŸ¡ Ã€ approfondir"
        }, ensure_ascii=False)
